# Import Necessary Libraries
import asyncio
import os
import sys
import json

# Import MCP client Components
from typing import Optional
from contextlib import AsyncExitStack
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

# Import Gemini AI SDK
from google import genai
from google.genai import types
from google.genai.types import Tool, FunctionDeclaration
from google.genai.types import GenerateContentConfig

from dotenv import load_dotenv

# Load Environment Variables
load_dotenv()

class MCPClient:
    def __init__(self):
        """Initialize the MCP Client and configure the Gemini API."""
        self.session: Optional[ClientSession] = None
        self.exit_stack = AsyncExitStack()

        # Retrieve the Gemini API Key
        gemini_api_key = os.getenv("GEMINI_API_KEY")
        if not gemini_api_key:
            raise ValueError("API Key not Valid")
        
        # Configure GENAI API
        self.genai_client = genai.Client(api_key=gemini_api_key)

    async def connect_to_server(self, server_script_path: str):
        """Connect to MCP Server & List Tools Available"""

        # correct execution of mcp server
        command = "uv"

        server_params = StdioServerParameters(
            command=command,
            args=[
                "run",
                server_script_path
            ]
        )

        stdio_transport = await self.exit_stack.enter_async_context(
            stdio_client(server_params)
        )

        self.stdio, self.write = stdio_transport

        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))

        await self.session.initialize()

        response = await self.session.list_tools()
        tools = response.tools

        print("\n Connected to server with tools:", [tool.name for tool in tools])

        self.function_declarations = convert_mcp_tools_to_gemini(tools)
    
    async def process_query(self, query: str) -> str:
        """
        Process a use query using Gemini API and Execute tool calls if needed

        Args:
            query (str): The user's input query.
        
        Returns:
            str: The response generated by gemini
        """

        # Format user Input as a structured content object for Gemini
        user_prompt_content = types.Content(
            role = 'user',                              # indicated user message
            parts = [types.Part.from_text(text=query)]  # Convert Text query to Gemini-Compatable Format
        )



def main():
    print("Hello from gemini-mcp-client-pythonsdk!")


if __name__ == "__main__":
    main()
